#!/usr/bin/env python3
"""
Script de v√©rification pour le d√©ploiement sur Render.
Ex√©cutez ce script avant de d√©ployer pour vous assurer que tout est configur√© correctement.
"""

import os
import sys
from pathlib import Path

def check_file_exists(filepath, description):
    """V√©rifie qu'un fichier existe."""
    if Path(filepath).exists():
        print(f"‚úÖ {description}: OK")
        return True
    else:
        print(f"‚ùå {description}: MANQUANT")
        return False

def check_file_executable(filepath, description):
    """V√©rifie qu'un fichier est ex√©cutable."""
    path = Path(filepath)
    if path.exists() and os.access(filepath, os.X_OK):
        print(f"‚úÖ {description}: EX√âCUTABLE")
        return True
    elif path.exists():
        print(f"‚ö†Ô∏è  {description}: Existe mais pas ex√©cutable (sera corrig√© par Render)")
        return True
    else:
        print(f"‚ùå {description}: MANQUANT")
        return False

def check_requirements():
    """V√©rifie que requirements.txt contient les d√©pendances essentielles."""
    required_packages = [
        'Django',
        'djangorestframework',
        'gunicorn',
        'psycopg2-binary',
        'dj-database-url',
        'whitenoise',
        'python-dotenv'
    ]
    
    try:
        with open('requirements.txt', 'r') as f:
            content = f.read().lower()
            
        missing = []
        for package in required_packages:
            if package.lower() not in content:
                missing.append(package)
        
        if missing:
            print(f"‚ùå requirements.txt: Manque {', '.join(missing)}")
            return False
        else:
            print(f"‚úÖ requirements.txt: Toutes les d√©pendances essentielles pr√©sentes")
            return True
    except FileNotFoundError:
        print(f"‚ùå requirements.txt: MANQUANT")
        return False

def check_settings():
    """V√©rifie les configurations importantes dans settings.py."""
    try:
        with open('config/settings.py', 'r') as f:
            content = f.read()
        
        checks = {
            'dj_database_url': 'Configuration PostgreSQL',
            'ALLOWED_HOSTS': 'ALLOWED_HOSTS',
            'STATIC_ROOT': 'Fichiers statiques',
            'whitenoise': 'WhiteNoise middleware',
        }
        
        all_ok = True
        for check, description in checks.items():
            if check in content:
                print(f"‚úÖ {description}: Configur√©")
            else:
                print(f"‚ùå {description}: MANQUANT dans settings.py")
                all_ok = False
        
        return all_ok
    except FileNotFoundError:
        print(f"‚ùå config/settings.py: MANQUANT")
        return False

def main():
    print("üîç V√©rification de la configuration pour Render\n")
    print("=" * 60)
    
    checks = []
    
    # V√©rifier les fichiers essentiels
    print("\nüìÅ Fichiers de configuration:")
    checks.append(check_file_exists('requirements.txt', 'requirements.txt'))
    checks.append(check_file_exists('build.sh', 'build.sh'))
    checks.append(check_file_exists('gunicorn.render.conf.py', 'gunicorn.render.conf.py'))
    checks.append(check_file_exists('config/settings.py', 'settings.py'))
    checks.append(check_file_exists('config/wsgi.py', 'wsgi.py'))
    checks.append(check_file_exists('manage.py', 'manage.py'))
    
    # V√©rifier que build.sh est ex√©cutable
    print("\nüîê Permissions:")
    checks.append(check_file_executable('build.sh', 'build.sh'))
    
    # V√©rifier le contenu de requirements.txt
    print("\nüì¶ D√©pendances Python:")
    checks.append(check_requirements())
    
    # V√©rifier les configurations dans settings.py
    print("\n‚öôÔ∏è  Configuration Django:")
    checks.append(check_settings())
    
    # V√©rifier render.yaml dans le dossier parent
    print("\nüåê Configuration Render:")
    parent_render_yaml = Path('..') / 'render.yaml'
    if parent_render_yaml.exists():
        print(f"‚úÖ render.yaml trouv√© dans le dossier parent")
        checks.append(True)
    else:
        print(f"‚ö†Ô∏è  render.yaml non trouv√© (optionnel si vous d√©ployez manuellement)")
        checks.append(True)  # Pas bloquant
    
    # R√©sum√©
    print("\n" + "=" * 60)
    if all(checks):
        print("‚úÖ TOUT EST PR√äT POUR LE D√âPLOIEMENT SUR RENDER ! üöÄ")
        print("\nProc√©dure :")
        print("1. Pushez votre code sur GitHub/GitLab")
        print("2. Allez sur https://dashboard.render.com/")
        print("3. Cr√©ez un nouveau Blueprint depuis votre d√©p√¥t")
        print("4. Configurez les variables d'environnement")
        print("5. D√©ployez !")
        return 0
    else:
        print("‚ùå CERTAINS PROBL√àMES DOIVENT √äTRE R√âSOLUS")
        print("\nConsultez le guide RENDER_DEPLOYMENT.md pour plus d'informations.")
        return 1

if __name__ == '__main__':
    # Changer le r√©pertoire de travail vers le dossier backend
    os.chdir(Path(__file__).parent)
    sys.exit(main())


